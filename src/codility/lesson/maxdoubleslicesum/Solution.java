package codility.lesson.maxdoubleslicesum;


/*
N 개의 정수로 구성된 비어 있지 않은 배열 A가 제공됩니다.

0 ≤ X <Y <Z <N과 같은 삼중 선 (X, Y, Z)을 이중 슬라이스 라고합니다 .

합 + A [Y + 1] + A [- 이중 슬라이스 (X, Y, Z)의이 A [X + 1] + A [X + 2] + ... + A [1 Y]의 합계이며 Y + 2] + ... + A [Z − 1].

예를 들어 배열 A는 다음과 같습니다.

    A [0] = 3
    A [1] = 2
    A [2] = 6
    A [3] = -1
    A [4] = 4
    A [5] = 5
    A [6] = -1
    A [7] = 2
다음 예제 이중 슬라이스를 포함합니다.

이중 슬라이스 (0, 3, 6), 합계는 2 + 6 + 4 + 5 = 17,
이중 슬라이스 (0, 3, 7), 합계는 2 + 6 + 4 + 5 − 1 = 16,
이중 슬라이스 (3, 4, 5), 합계는 0입니다.
목표는 이중 슬라이스의 최대 합을 찾는 것입니다.

함수 작성 :

class Solution {public int solution (int [] A); }

N 개의 정수로 구성된 비어 있지 않은 배열 A가 주어지면 이중 슬라이스의 최대 합을 반환합니다.

예를 들면 다음과 같습니다.

    A [0] = 3
    A [1] = 2
    A [2] = 6
    A [3] = -1
    A [4] = 4
    A [5] = 5
    A [6] = -1
    A [7] = 2
배열 A의 이중 슬라이스의 합이 17보다 크지 않으므로 함수는 17을 반환해야합니다.

다음 가정에 대한 효율적인 알고리즘을 작성하십시오 .

N은 [ 3 .. 100,000 ] 범위 내의 정수 이고;
배열 A의 각 요소는 [ −10,000 .. 10,000 ] 범위 내의 정수 입니다.
저작권 2009–2021 by Codility Limited. 판권 소유. 무단 복사, 게시 또는 공개를 금지합니다.
 */

public class Solution {
}
